# -*- coding: utf-8 -*-
"""video.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11_iqQWDsbS-SbUbUVkDFoe_-dATEw6e6
"""

import cv2 
import os

myvideoes=cv2.VideoCapture('mypyvid.mp4')

try:  
	if not os.path.exists('anesuteam'): 
		os.makedirs('anesuteam') 
except OSError: 
	print ('Error') 
currentframe = 0
while(True): 
	ret,frame = myvideoes.read() 

	if ret: 
		name = './anesuteam/frame' + str(currentframe) + '.jpg'
		print ('Captured...' + name) 
		cv2.imwrite(name, frame) 
		currentframe += 1
	else: 
		break
myvideoes.release() 
cv2.destroyAllWindows()

from keras.preprocessing.image import load_img
imagex = load_img('anesuteam/frame1410.jpg', target_size=(224, 224))

from keras.preprocessing.image import img_to_array
imagsse = img_to_array(imagex)

# reshape data for the model
image = imagsse.reshape((1, imagsse.shape[0], imagsse.shape[1], imagsse.shape[2]))

from keras.applications.vgg16 import preprocess_input
# prepare the image for the VGG model
latest_image = preprocess_input(image)

# predict the probability across all output classes
yhat = model.predict(latest_image)

from keras.applications.vgg16 import decode_predictions
# convert the probabilities to class labels
label = decode_predictions(yhat)
# retrieve the most likely result, e.g. highest probability
label = label[0][0]
# print the classification
print('%s (%.2f%%)' % (label[1], label[2]*100))

from keras.applications.vgg16 import VGG16
from keras.utils.vis_utils import plot_model
model = VGG16()
plot_model(model, to_file='vgg.png')

